plugins {
  id 'java-library'
  id 'jacoco-report-aggregation'
  id 'test-report-aggregation'
  id 'maven-publish'
  id 'signing'
  alias(libs.plugins.sonar)
  alias(libs.plugins.nexus)
  alias(libs.plugins.versions)
  alias(libs.plugins.errorprone)
  alias(libs.plugins.eclipse)
}

apply plugin: 'org.sonarqube'

dependencies {
  subprojects.forEach {
    jacocoAggregation it
    testReportAggregation it
  }
}

reporting {
  reports {
    testCodeCoverageReport(JacocoCoverageReport) { 
      testSuiteName = "test"
    }
    testAggregateTestReport(AggregateTestReport) { 
      testSuiteName = "test"
    }
  }
}

tasks.named('check') {
  dependsOn tasks.named('testCodeCoverageReport', JacocoReport) 
  dependsOn tasks.named('testAggregateTestReport', TestReport) 
}

allprojects {
  apply plugin: 'java-library'
  apply plugin: 'jacoco'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'
  apply plugin: 'net.ltgt.errorprone'
  apply plugin: 'com.diffplug.eclipse.apt'

  group = 'com.github.tonivade'

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(21)
    }
  }

  ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url = 'https://central.sonatype.com/repository/maven-snapshots/'
    }
  }

  jacoco {
    toolVersion = "0.8.11"
  }

  javadoc.options {
    addStringOption('-release', '21')
  }

  compileJava {
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:rawtypes'
    options.release = 21
  }

  compileTestJava {
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:rawtypes'
    options.release = 21
  }

  jacocoTestReport {
    reports {
      xml.required = true
      html.required = true
      xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
    }
  }
}

subprojects {

  java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    
    withJavadocJar()
    withSourcesJar()
  }

  test {
    useJUnitPlatform()

    jacoco {
      destinationFile = file("${buildDir}/jacoco/test.exec")
    }

    reports.html.required = true
  }
  
  tasks.withType(JavaCompile) {
    if (!name.toLowerCase().contains("test")) {
      options.errorprone {
        check("NullAway", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)
        option("NullAway:AnnotatedPackages", "com.github.tonivade.purefun")
        option("NullAway:SuggestSuppressions", "true")
      }
    } else {
      options.errorprone.enabled = false
    }
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        
        from components.java

        pom {
          name = 'Pure Fun'
          description = 'Functional Programming Library for Java'
          url = 'https://github.com/tonivade/purefun'
          inceptionYear = '2018'

          scm {
            url = 'https://github.com/tonivade/purefun'
            connection = 'scm:https://github.com/tonivade/purefun.git'
            developerConnection = 'scm:git://github.com/tonivade/purefun.git'
          }

          licenses {
            license {
              name = 'The MIT License (MIT)'
              url = 'https://github.com/tonivade/purefun/blob/master/LICENSE'
              distribution = 'repo'
            }
          }

          developers {
            developer {
              id = 'tonivade'
              name = 'Antonio MuÃ±oz'
              email = 'antoniogmc@gmail.com'
            }
          }
        }
      }
    }
  }

  signing {
    def signingKey = project.findProperty("signingKey")
    def signingPassword = project.findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
  }
  
  tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
  }

  dependencies {
    errorprone libs.nullaway
    errorprone libs.errorprone
    testImplementation platform(libs.junitBom)
    testImplementation libs.junitJupiter
    testRuntimeOnly libs.junitLauncher
    testImplementation libs.equalsVerifier
    testImplementation libs.mockitoCore
    testImplementation libs.mockitoJunit
  }
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
      snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
      
      stagingProfileId = '19a96b937cdb5'
      
      username = project.findProperty('nexusUsername')  
      password = project.findProperty('nexusPassword')
    }
  }
  
  clientTimeout = Duration.ofSeconds(300)
  connectTimeout = Duration.ofSeconds(60)

  transitionCheckOptions {
    maxRetries.set(40)
    delayBetween.set(Duration.ofMillis(3000))
  }
}
