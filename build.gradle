plugins {
  id 'java-library'
  id 'jacoco-report-aggregation'
  id 'test-report-aggregation'
  id 'maven-publish'
  id 'signing'
  alias(libs.plugins.sonar)
  alias(libs.plugins.nexus)
  alias(libs.plugins.versions)
  alias(libs.plugins.eclipse)
}

apply plugin: 'org.sonarqube'

dependencies {
  jacocoAggregation projects.purefunControl
  jacocoAggregation projects.purefunCore
  jacocoAggregation projects.purefunEffect
  jacocoAggregation projects.purefunFree
  jacocoAggregation projects.purefunGeneric
  jacocoAggregation projects.purefunInstances
  jacocoAggregation projects.purefunMonad
  jacocoAggregation projects.purefunOptics
  jacocoAggregation projects.purefunProcessor
  jacocoAggregation projects.purefunStream
  jacocoAggregation projects.purefunTransformer
  jacocoAggregation projects.purefunTypeclasses

  testReportAggregation projects.purefunControl
  testReportAggregation projects.purefunCore
  testReportAggregation projects.purefunEffect
  testReportAggregation projects.purefunFree
  testReportAggregation projects.purefunGeneric
  testReportAggregation projects.purefunInstances
  testReportAggregation projects.purefunMonad
  testReportAggregation projects.purefunOptics
  testReportAggregation projects.purefunProcessor
  testReportAggregation projects.purefunStream
  testReportAggregation projects.purefunTransformer
  testReportAggregation projects.purefunTypeclasses
}

reporting {
  reports {
    testCodeCoverageReport(JacocoCoverageReport) { 
      testType = TestSuiteType.UNIT_TEST
    }
    testAggregateTestReport(AggregateTestReport) { 
      testType = TestSuiteType.UNIT_TEST
    }
  }
}

tasks.named('check') {
  dependsOn tasks.named('testCodeCoverageReport', JacocoReport) 
  dependsOn tasks.named('testAggregateTestReport', TestReport) 
}

allprojects {
  apply plugin: 'java-library'
  apply plugin: 'jacoco'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'
  apply plugin: 'com.diffplug.eclipse.apt'

  group = 'com.github.tonivade'

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(21)
    }
  }

  ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
  }

  jacoco {
    toolVersion = "0.8.11"
  }

  javadoc.options {
    addStringOption('-release', '21')
  }

  compileJava {
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:rawtypes'
    options.release = 21
  }

  compileTestJava {
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:rawtypes'
    options.release = 21
  }

  jacocoTestReport {
    reports {
      xml.required = true
      html.required = true
      xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
    }
  }
}

subprojects {

  java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    
    withJavadocJar()
    withSourcesJar()
  }

  test {
    useJUnitPlatform()

    jacoco {
      destinationFile = file("${buildDir}/jacoco/test.exec")
    }

    reports.html.required = true
  }

  tasks.withType(JavaCompile).each {
    if (it.getName().contains("Java21")) {
      it.options.release = 21
    } else {
      it.options.release = 21
    }
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        
        from components.java

        pom {
          name = 'Pure Fun'
          description = 'Functional Programming Library for Java'
          url = 'https://github.com/tonivade/purefun'
          inceptionYear = '2018'

          scm {
            url = 'https://github.com/tonivade/purefun'
            connection = 'scm:https://github.com/tonivade/purefun.git'
            developerConnection = 'scm:git://github.com/tonivade/purefun.git'
          }

          licenses {
            license {
              name = 'The MIT License (MIT)'
              url = 'https://github.com/tonivade/purefun/blob/master/LICENSE'
              distribution = 'repo'
            }
          }

          developers {
            developer {
              id = 'tonivade'
              name = 'Antonio MuÃ±oz'
              email = 'antoniogmc@gmail.com'
            }
          }
        }
      }
    }
  }

  signing {
    sign publishing.publications.mavenJava
  }
  
  tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
  }

  dependencies {
    testImplementation libs.junitJupiter
    testRuntimeOnly libs.junitRunner
    testImplementation libs.equalsVerifier
    testImplementation libs.mockitoCore
    testImplementation libs.mockitoJunit
  }
}

nexusPublishing {
  repositories {
    sonatype {
      
      stagingProfileId = '19a96b937cdb5'
      
      username = project.findProperty('nexusUsername')  
      password = project.findProperty('nexusPassword')
    }
  }
  
  clientTimeout = Duration.ofSeconds(300)
  connectTimeout = Duration.ofSeconds(60)

  transitionCheckOptions {
    maxRetries.set(40)
    delayBetween.set(Duration.ofMillis(3000))
  }
}
